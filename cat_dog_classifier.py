# -*- coding: utf-8 -*-
"""Cat_Dog_Classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/142EDAFe_AEpaZjFefN_YvYNT9H1QhOwz

# **Import required libraries**
"""

# import the libraries as shown below
from tensorflow.keras.models import Sequential,load_model
from tensorflow.keras.layers import Dense,Flatten,Conv2D,MaxPool2D,MaxPooling2D,Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.preprocessing import image
import pandas as pd
import numpy as np

img_size = [64,64,3]

test = 'dataset//test_set'
train = 'dataset//training_set'

"""# **Data** **Augmentation**"""

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

# Make sure you provide the same target size as initialied for the image size
training_set = train_datagen.flow_from_directory(train,
                                                 target_size = (64, 64),
                                                 batch_size = 16,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory(test,
                                            target_size = (64, 64),
                                            batch_size = 16,
                                            class_mode = 'categorical')

training_set.class_indices

"""# **Define a model**"""

model1 = Sequential()
model1.add(Conv2D(filters=32, kernel_size=3, input_shape=[64, 64, 3]))
model1.add(MaxPooling2D(pool_size=(2,2)))
model1.add(Conv2D(filters=64, kernel_size=3))
model1.add(MaxPooling2D(pool_size=(2,2)))
model1.add(Conv2D(filters=128, kernel_size=3))
model1.add(MaxPooling2D(pool_size=(2,2)))

model1.add(Conv2D(filters=256, kernel_size=3))
model1.add(MaxPooling2D(pool_size=(2,2)))

model1.add(Dropout(0.5))
model1.add(Flatten()) # neural network beulding
model1.add(Dense(units=128, activation='relu')) # input layers
model1.add(Dropout(0.1))
model1.add(Dense(units=256, activation='relu'))
model1.add(Dropout(0.25))
model1.add(Dense(units=2, activation='softmax')) # output layer

model1.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])



"""# **Train a model**"""

history1 = model1.fit(
  training_set,
  validation_data=test_set,
  epochs=25,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)

"""# **Save a model**"""

# save it as a h5 file
model1.save('Cat_Dog_classifier2.h5')   # Dog:1 , Cat:0

"""# **Load a model**"""

model =load_model("Cat_Dog_classifier2.h5")

"""# **Test a image that model is working correctly or not**"""

# img_path = "/content/drive/MyDrive/datasets/cat_dog_dataset/Test_imgs/1.jpeg"
img_path = "Test_imgs//5.png"

img=load_img(img_path,target_size=(64,64))
img

x=image.img_to_array(img)
x=x/255
x=np.expand_dims(x,axis=0)
pred = np.argmax(model.predict(x)[0], axis=-1)

if pred==1:
  print('DOG')
elif pred==0:
  print("CAT")
else:
  print("Unknown Image")

